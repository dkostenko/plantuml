import { Component, ViewChild, ChangeDetectorRef } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { HttpClient } from '@angular/common/http';

interface IRenderingError {
  // 1 - Server is unavailable;
  // 2 - Transport error;
  // 100 - Unknown server error;
  // 101 - Internal server error;
  // 102 - Invalid params were sent to the server;
  // 103 - Syntax error;
  // 104 - Unknown output error;
  code: number;

  // Line number with an error.
  lineNumber?: number;

  // Raw error description, returned by the server.
  rawError?: string;
}

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  @ViewChild('editor') editor;

  // Diagram description.
  text:string = `@startuml\nskinparam monochrome true\n\n@enduml`;

  // Rendered diagram in SVG format.
  svg:SafeHtml;

  // Options for ACE editor.
  options:any = {fontSize: "12pt"};

  // Rendering states.
  // 0 - [DEFAULT] show instructions.
  // 1 - show rendered diagram.
  // 2 - diagram is rendering right now.
  // 3 - error occured.
  renderingState:number = 0;

  // Rendering error (when rendering state is 3).
  renderingError:IRenderingError = null;

  ngAfterViewInit() {
    // Bind diagram rendering on keyboard shortcut.
    this.editor.getEditor().commands.addCommand({
      name: "Render diagram",
      exec: this.renderDiagram.bind(this),
      bindKey: {mac: "cmd-e", win: "ctrl-e"}
    });

    // Focus on the empty line in diagram description.
    this.editor.getEditor().gotoLine(3, 0);
    this.editor.getEditor().focus();
  }

  constructor(
    private sanitizer: DomSanitizer,
    private http: HttpClient,
    private cd: ChangeDetectorRef
  ) { }

  // renderDiagram renders a diagram in SVG format from the diagram description, created
  // with the help of editor.
  renderDiagram() {
    this.renderingState = 2;
    let data: any = {
      data: this.text,
      format: "svg",
    }
    this.http.post("/api/render-diagram", data, {responseType: 'text'})
      .subscribe(
        (resp: any) => {
          this.renderingState = 1;
          this.renderingError = null;
          this.svg = this.sanitizer.bypassSecurityTrustHtml(resp);

          // Change DOM.
          this.cd.detectChanges();
        },
        (errorResp: any) => {
          this.renderingState = 3;

          // HTTP status 500 means the error generated by server.
          if (errorResp.status === 500) {
            if (errorResp.error !== undefined || errorResp.error !== null) {
              let err = JSON.parse(errorResp.error);
              this.renderingError = this.convertServerErroToClientError(err);
            } else {
              this.renderingError = { code: 2 };
            }
          } else {
            this.renderingError = { code: 1 };
          }
        }
      );
  }

  // convertServerErroToClientError returns a client error object, based on the server error.
  convertServerErroToClientError(err: any): IRenderingError {
    let renderingError: IRenderingError = { code: 0 };
    switch (err.error_code) {
    case 2:
      renderingError.code = 102;
      break;
    case 3:
      renderingError.code = 103;
      renderingError.lineNumber = err.error_data.syntax_error_line;
      renderingError.rawError = err.error_data.raw;
      break;
    case 4:
      renderingError.code = 104;
      break;
    default:
      renderingError.code = 104;
      break;
    }
    return renderingError;
  }
}
